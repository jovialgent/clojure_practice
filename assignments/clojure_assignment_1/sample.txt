George Petersen
2/3/2015
CS 3210

Read out for all tests for clojure assignment 1


Tests For delete-at

Testing:  Determines if first element is removed 

L (or args)= (0 1 2 3 4 5)
Expected Value: (1 2 3 4 5)
Function Call: (delete-at L 0)
Actual Value: (1 2 3 4 5) 


Testing:  Determines if last element is removed 

L (or args)= (0 1 2 3 4 5)
Expected Value: (0 1 2 3 4)
Function Call: (delete-at L (- (count L) 1))
Actual Value: (0 1 2 3 4) 


Testing:  Determines if element is removed at index i 

L (or args)= (0 1 2 3 4 5)
Expected Value: (0 1 3 4 5)
Function Call: (delete-at L 2)
Actual Value: (0 1 3 4 5) 


Testing:  Determines if removed from mixed elements 

L (or args)= (Apple (0 1 2 3) 4 Davis ((0 2 3) 4) Andrew)
Expected Value: (Apple (0 1 2 3) Davis ((0 2 3) 4) Andrew)
Function Call: (delete-at L 2)
Actual Value: (Apple (0 1 2 3) Davis ((0 2 3) 4) Andrew) 


Tests For delete-all-at

Testing:  Determines if all args are negative return L 

L (or args)= (0 1 2 3 4 5)
Expected Value: (0 1 2 3 4 5)
Function Call: (delete-all-at L -1 -2 -3)
Actual Value: (0 1 2 3 4 5) 


Testing:  Remove first element if only one arg and its zero 

L (or args)= (0 1 2 3 4 5)
Expected Value: (1 2 3 4 5)
Function Call: (delete-all-at L 0)
Actual Value: (1 2 3 4 5) 


Testing:  Remove any element if only one arg and its non-zero 

L (or args)= (0 1 2 3 4 5)
Expected Value: (0 1 3 4 5)
Function Call: (delete-all-at L 2)
Actual Value: (0 1 3 4 5) 


Testing:  Remove any number of elements matching args 

L (or args)= (0 1 2 3 4 5)
Expected Value: (0 1 5)
Function Call: (delete-all-at L 2 3 4)
Actual Value: (0 1 5) 


Testing:  Remove any number of mixed elements matching args 

L (or args)= (Apple (0 1 2 3) 4 Davis ((0 2 3) 4) Andrew)
Expected Value: (Apple (0 1 2 3) Andrew)
Function Call: (delete-all-at L 2 3 4)
Actual Value: (Apple (0 1 2 3) Andrew) 


Testing:  Return an emply list if all elements are in args 

L (or args)= (0 1 2 3 4 5)
Expected Value: ()
Function Call: (delete-all-at L 0 1 2 3 4 5)
Actual Value: () 


Tests For similar

Testing:  Return an empty list if there are no elements in either 

L (or args)= (0 1 2 3 4 5)
L2= ()
Expected Value: ()
Function Call: (similar L ())
Actual Value: () 


Testing:  Return an empty list if non match 

L (or args)= (0 1 2 3 4 5)
L2= (Adam Betty Carlos David Edwin Fred)
Expected Value: ()
Function Call: (similar L L2)
Actual Value: () 


Testing:  Return a list containing similar elements 

L (or args)= (0 1 2 3 4 5)
L2= (1 2 3 4 5 6)
Expected Value: (1 2 3 4 5)
Function Call: (similar L L2)
Actual Value: (1 2 3 4 5) 


Testing:  Return a list containing similar mixed-elements 

L (or args)= (Apple (0 1 2 3) 4 Davis ((0 2 3) 4) Andrew)
L2= (Apple (0 1 2 3) 5 Angela ((0 2 3) 4) Andrew)
Expected Value: (Apple (0 1 2 3) ((0 2 3) 4) Andrew)
Function Call: (similar L L2)
Actual Value: (Apple (0 1 2 3) ((0 2 3) 4) Andrew) 


Tests for alone

Testing:  Return an empty list if there are no elements in either 

L (or args)= ()
L2= ()
Expected Value: ()
Function Call: (alone (quote ()) ())
Actual Value: () 


Testing:  Returns List L if list L2 is empty 

L (or args)= (0 1 2 3 4 5)
L2= ()
Expected Value: (0 1 2 3 4 5)
Function Call: (alone L (quote ()))
Actual Value: (0 1 2 3 4 5) 


Testing:  Returns List L2 if list L is empty 

L (or args)= ()
L2= (0 1 2 3 4 5)
Expected Value: (0 1 2 3 4 5)
Function Call: (alone (quote ()) L2)
Actual Value: (0 1 2 3 4 5) 


Testing:  Returns a list of elements in one or the other, but not both 

L (or args)= (0 1 2 3 4 5)
L2= (1 2 3 4 5 6)
Expected Value: (0 6)
Function Call: (similar L L2)
Actual Value: (0 6) 


Testing:  Returns a list of mixed elements in one or the other, but not both 

L (or args)= (Apple (0 1 2 3) 4 Davis ((0 2 3) 4) Andrew)
L2= (Apple (0 1 2 3) 5 Angela ((0 2 3) 4) Andrew)
Expected Value: (4 Davis 5 Angela)
Function Call: (alone L L2)
Actual Value: (4 Davis 5 Angela) 


Tests for mcons

Testing:  Return list if only argument 

L (or args)= ((quote (0 1 2)))
Expected Value: (0 1 2)
Function Call: (mcons (quote (0 1 2)))
Actual Value: (0 1 2) 


Testing:  Returns list with one elements to the left cons to the list 

L (or args)= (3 (quote (0 1 2)))
Expected Value: (3 0 1 2)
Function Call: (mcons 3 (quote (0 1 2)))
Actual Value: (3 0 1 2) 


Testing:  Returns list with many elements to the left cons to the list 

L (or args)= (4 3 (quote (0 1 2)))
Expected Value: (4 3 0 1 2)
Function Call: (mcons 4 3 (quote (0 1 2)))
Actual Value: (4 3 0 1 2) 


Testing:  Returns list with many mixed elements to the left cons to the list 

L (or args)= (Apple 3 (quote (0 1 2 3)) (quote (0 1 2)))
Expected Value: (Apple 3 (quote (0 1 2 3)) 0 1 2)
Function Call: (mcons Apple 3 (quote (0 1 2 3)) (quote (0 1 2)))
Actual Value: (Apple 3 (0 1 2 3) 0 1 2) 


Tests for invert

Testing:  Returns -1 if the list has odd number of elements 

L (or args)= (0 1 2)
Expected Value: -1
Function Call: (invert (quote (0 1 2)))
Actual Value: -1 


Testing:  Returns a swap on a list size of two 

L (or args)= (0 1)
Expected Value: (1 0)
Function Call: (invert (quote (0 1)))
Actual Value: (1 0) 


Testing:  Returns a swap on any even list size 

L (or args)= (0 1 2 3 4 5 6 7 8 9 10 11)
Expected Value: (1 0 3 2 5 4 7 6 9 8 11 10)
Function Call: (invert (quote (0 1 2 3 4 5 6 7 8 9 10 11)))
Actual Value: (1 0 3 2 5 4 7 6 9 8 11 10) 


Testing:  Returns a swap on any even list size with mixed elements 

L (or args)= (0 Apple 2 (0 1) Grape 5 (Andrew Ryan) Soda race car 10 11)
Expected Value: (Apple 0 (0 1) 2 5 Grape Soda (Andrew Ryan) car race 11 10)
Function Call: (invert (quote (0 Apple 2 (0 1) Grape 5 (Andrew Ryan) Soda race car 10 11)))
Actual Value: (Apple 0 (0 1) 2 5 Grape Soda (Andrew Ryan) car race 11 10) 